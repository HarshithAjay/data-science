 1. Install Necessary Libraries
python
Copy
Edit
pip install pandas numpy nltk seaborn matplotlib wordcloud textblob
2. Load the Dataset
python
Copy
Edit
import pandas as pd

# Load the dataset (Replace 'your_dataset.csv' with actual file)
df = pd.read_csv("your_dataset.csv")

# Display first few rows
df.head()
3. Preprocess the Text
python
Copy
Edit
import re
import nltk
from nltk.corpus import stopwords

nltk.download('stopwords')
stop_words = set(stopwords.words('english'))

def clean_text(text):
    text = re.sub(r"http\S+|www\S+|https\S+", "", text, flags=re.MULTILINE)  # Remove URLs
    text = re.sub(r"\@\w+|\#", "", text)  # Remove mentions and hashtags
    text = re.sub(r"[^\w\s]", "", text)  # Remove punctuation
    text = " ".join([word for word in text.split() if word.lower() not in stop_words])  # Remove stopwords
    return text.lower()

df["clean_text"] = df["text"].apply(lambda x: clean_text(str(x)))  # Apply cleaning function
4. Perform Sentiment Analysis
python
Copy
Edit
from textblob import TextBlob

def get_sentiment(text):
    return TextBlob(text).sentiment.polarity  # Polarity: (-1 Negative, 0 Neutral, +1 Positive)

df["sentiment_score"] = df["clean_text"].apply(lambda x: get_sentiment(x))

# Categorize Sentiments
df["sentiment"] = df["sentiment_score"].apply(lambda x: "Positive" if x > 0 else ("Negative" if x < 0 else "Neutral"))

df.head()
5. Visualize Sentiment Distribution
python
Copy
Edit
import seaborn as sns
import matplotlib.pyplot as plt

# Sentiment Count Plot
plt.figure(figsize=(8, 5))
sns.countplot(x=df["sentiment"], palette="pastel")
plt.title("Sentiment Distribution")
plt.xlabel("Sentiment")
plt.ylabel("Count")
plt.show()
6. Generate a Word Cloud for Each Sentiment
python
Copy
Edit
from wordcloud import WordCloud

# Generate word cloud for positive sentiments
positive_text = " ".join(df[df["sentiment"] == "Positive"]["clean_text"])
wordcloud = WordCloud(width=800, height=400, background_color="white").generate(positive_text)

plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.title("Word Cloud for Positive Sentiments")
plt.show()
7. Sentiment Trend Over Time (If Timestamp Available)
python
Copy
Edit
df["timestamp"] = pd.to_datetime(df["timestamp"])  # Ensure timestamp is in datetime format

# Aggregate Sentiment Over Time
sentiment_trend = df.groupby(df["timestamp"].dt.date)["sentiment_score"].mean()

plt.figure(figsize=(12, 5))
sentiment_trend.plot(marker="o", linestyle="-", color="blue")
plt.title("Sentiment Trend Over Time")
plt.xlabel("Date")
plt.ylabel("Average Sentiment Score")
plt.show()










